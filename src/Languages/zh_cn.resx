<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  
  
  <!--Global-->
  
  <data name="global_advancement" xml:space="preserve">
    <value>进度</value>
  </data>
  <data name="global_data" xml:space="preserve">
    <value>数据</value>
  </data>
  <data name="global_datapack" xml:space="preserve">
    <value>数据包</value>
  </data>
  <data name="global_function" xml:space="preserve">
    <value>函数</value>
  </data>
  <data name="global_loottable" xml:space="preserve">
    <value>战利品表</value>
  </data>
  <data name="global_recipe" xml:space="preserve">
    <value>配方</value>
  </data>
  <data name="global_settings" xml:space="preserve">
    <value>设置</value>
  </data>
  <data name="global_structure" xml:space="preserve">
    <value>结构</value>
  </data>
  <data name="global_tag" xml:space="preserve">
    <value>标签</value>
  </data>
  <data name="global_namespace" xml:space="preserve">
    <value>命名空间</value>
  </data>
  <data name="global_block" xml:space="preserve">
    <value>方块</value>
  </data>
  <data name="global_item" xml:space="preserve">
    <value>物品</value>
  </data>
  
  
  <!--FileTree-->
  
  <data name="filetree_add" xml:space="preserve">
    <value>添加...</value>
  </data>
  <data name="filetree_collapse" xml:space="preserve">
    <value>收起</value>
  </data>
  <data name="filetree_copy" xml:space="preserve">
    <value>复制</value>
  </data>
  <data name="filetree_cut" xml:space="preserve">
    <value>剪切</value>
  </data>
  <data name="filetree_delete" xml:space="preserve">
    <value>删除</value>
  </data>
  <data name="filetree_edit" xml:space="preserve">
    <value>编辑</value>
  </data>
  <data name="filetree_expand" xml:space="preserve">
    <value>展开</value>
  </data>
  <data name="filetree_file" xml:space="preserve">
    <value>文件</value>
  </data>
  <data name="filetree_folder" xml:space="preserve">
    <value>文件夹</value>
  </data>
  <data name="filetree_msgbox_exist" xml:space="preserve">
    <value>已存在：{0}</value>
  </data>
  <data name="filetree_msgbox_suretodelete" xml:space="preserve">
    <value>你确定要删除 {0} ？</value>
  </data>
  <data name="filetree_msgbox_notadatapack" xml:space="preserve">
    <value>{0} 不是空的文件夹，也不像一个数据包，是否继续？</value>
  </data>
  <data name="filetree_msgbox_notalegalname" xml:space="preserve">
    <value>文件名 {0} 不合法，文件名只能包含小写字母、数字、下划线“_” 和 横线“-”。不建议使用拼音</value>
  </data>
  <data name="filetree_paste" xml:space="preserve">
    <value>粘贴</value>
  </data>
  <data name="filetree_properties_name" xml:space="preserve">
    <value>名称</value>
  </data>
  <data name="filetree_properties_path" xml:space="preserve">
    <value>路径</value>
  </data>
  <data name="filetree_properties_type" xml:space="preserve">
    <value>类型</value>
  </data>
  <data name="filetree_property" xml:space="preserve">
    <value>属性</value>
  </data>
  <data name="filetree_rename" xml:space="preserve">
    <value>重命名</value>
  </data>

  <!--MainForm-->
  <data name="mainform_info_exportzipsuccessfully" xml:space="preserve">
    <value>zip文件已成功导出到 {0}</value>
  </data>
  <data name="mainform_msgbox_savechangedornot" xml:space="preserve">
    <value>是否将你所作的更改保存到 {0} ？</value>
  </data>
  <data name="mainform_infobar_error" xml:space="preserve">
    <value>错误</value>
  </data>
  <data name="mainform_infobar_warn" xml:space="preserve">
    <value>警告</value>
  </data>
  <data name="mainform_infobar_info" xml:space="preserve">
    <value>信息</value>
  </data>

  <!--Parsers-->
  <data name="parsers_info_loadsuccessfully" xml:space="preserve">
    <value>成功数据驱动</value>
  </data>
  <data name="parsers_error_loadbad" xml:space="preserve">
    <value>数据驱动失败</value>
  </data>
  <data name="parsers_info_parsesuccessfully" xml:space="preserve">
    <value>解析成功</value>
  </data>
  <data name="parsers_error_parsebad" xml:space="preserve">
    <value>解析失败</value>
  </data>
  
  <!--TextParser-->
  <data name="textparser_warn_outofzone" xml:space="preserve">
    <value>你所输入的内容超出范围！</value>
  </data>

  <!--Keys-->

  <data name="key_" xml:space="preserve">
    <value></value>
  </data>
  
  <data name="key_packmcmeta_packmcmeta_pack" xml:space="preserve">
    <value>信息</value>
  </data>
  <data name="key_packmcmeta_pack_pack_format" xml:space="preserve">
    <value>版本</value>
  </data>
  <data name="key_packmcmeta_pack_description" xml:space="preserve">
    <value>描述</value>
  </data>
  <data name="key_tag_tag_replace" xml:space="preserve">
    <value>是否覆盖</value>
  </data>
  <data name="key_tag_tag_values" xml:space="preserve">
    <value>值</value>
  </data>

  <!--Descriptions-->

  <data name="description_" xml:space="preserve">
    <value></value>
  </data>

  <data name="description_packmcmeta_pack" xml:space="preserve">
    <value>存放数据包信息。展开进行编辑。</value>
  </data>
  <data name="description_pack_pack_format" xml:space="preserve">
    <value>数据包版本，可以是任何数字。</value>
  </data>
  <data name="description_pack_description" xml:space="preserve">
    <value>一段描述，此字段可以为空。在数据包列表下，光标移动到对应的数据包时会显示描述。</value>
  </data>
  <data name="description_tag_replace" xml:space="preserve">
    <value>该标签是否要覆盖掉低优先级的数据包中的相同标签。设置为“否”将会把内容合并到该标签，而不是覆盖。</value>
  </data>
  <data name="description_tag_values" xml:space="preserve">
    <value>一堆物品，方块或函数。可以放入其他同类型的标签。</value>
  </data>

</root>